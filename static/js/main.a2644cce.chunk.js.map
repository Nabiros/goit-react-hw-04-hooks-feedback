{"version":3,"sources":["components/Statistic/Statistic.styled.jsx","components/Statistic/Statistic.jsx","components/Buttons/Buttons.styled.jsx","components/Buttons/Buttons.jsx","components/Section/Section.styled.jsx","components/Section/Section.jsx","components/Notification/Notification.styled.jsx","components/Notification/Notification.jsx","App.js","index.js"],"names":["Text","styled","p","TotalNumber","span","Number","Statistic","good","neutral","bad","total","positivePercentage","ButtonStyle","button","Button","options","onLeaveFeedback","map","option","type","onClick","Title","h2","Section","title","children","Notification","message","App","state","handleIncrement","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gSAEaA,EAAOC,IAAOC,EAAV,kHAOJC,EAAcF,IAAOG,KAAV,gDAIXC,EAASJ,IAAOG,KAAV,gD,OCTNE,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACvB,gCACE,eAACX,EAAD,mBACQ,IACN,cAAC,EAAD,UACE,cAACG,EAAD,UAAcI,SAGlB,eAACP,EAAD,sBACW,IACT,cAAC,EAAD,UACE,cAACG,EAAD,UAAcK,SAGlB,eAACR,EAAD,kBACO,IACL,cAAC,EAAD,UACE,cAACG,EAAD,UAAcM,SAGlB,eAACT,EAAD,qBACS,cAAC,EAAD,UAASU,OAElB,eAACV,EAAD,iCACqB,eAAC,EAAD,WAASW,EAAT,cC1BZC,EAAcX,IAAOY,OAAV,yPCEXC,EAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACpBD,EAAQE,KAAI,SAAAC,GAAM,OAChB,cAACN,EAAD,CAAaO,KAAK,SAAsBC,QAAS,kBAAMJ,EAAgBE,IAAvE,SACGA,GAD6BA,OCJvBG,EAAQpB,IAAOqB,GAAV,gGCELC,EAAU,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,SAAT,OACnB,qCACA,cAACJ,EAAD,UAAQG,IACR,8BAAMC,QCJGzB,EAAOC,IAAOC,EAAV,+FCCJwB,EAAe,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAAF,OACxB,cAAC,EAAD,UAAOA,KCCLC,E,4MACJC,MAAQ,CACNtB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPqB,gBAAkB,SAACZ,GACjB,EAAKa,UAAS,SAACC,GACb,OAAO,eACJd,EAASc,EAAUd,GAAU,O,EAKpCe,mBAAqB,WACnB,MAA+B,EAAKJ,MACpC,OADA,EAAQtB,KAAR,EAAcE,IAAd,EAAmBD,S,EAIrB0B,gCAAkC,WAChC,MAA+B,EAAKL,MAA5BtB,EAAR,EAAQA,KACFG,EAAQH,EADd,EAAcC,QAAd,EAAuBC,IAEvB,OAAO0B,KAAKC,MAAc,IAAP7B,EAAcG,I,4CAGnC,WACE,MAA+B2B,KAAKR,MAA5BtB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACvB,OACE,gCACE,cAAC,EAAD,CAASe,MAAM,wBAAf,SACE,cAAC,EAAD,CACET,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAAiBqB,KAAKP,oBAGzBvB,GAAQC,GAAWC,EAAM,EACxB,cAAC,EAAD,CAASe,MAAM,YAAf,SACE,cAAC,EAAD,CACEjB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAO2B,KAAKJ,qBACZtB,mBAAoB0B,KAAKH,sCAI7B,cAAC,EAAD,CAAcP,QAAQ,6B,GA/CdW,aAsDHV,ICvDfW,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a2644cce.chunk.js","sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const Text = styled.p`\r\n  font-size: 20px;\r\n  color: black;\r\n  font-weight: bold;\r\n  margin: 5px 0 5px 24px;\r\n`;\r\n\r\nexport const TotalNumber = styled.span`\r\n  font-size: 20px;\r\n`;\r\n\r\nexport const Number = styled.span`\r\n  font-size: 20px;\r\n`;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Text, TotalNumber, Number } from './Statistic.styled';\r\n\r\nexport const Statistic = ({ good, neutral, bad, total, positivePercentage }) => (\r\n  <div>\r\n    <Text>\r\n      Good:{' '}\r\n      <Number>\r\n        <TotalNumber>{good}</TotalNumber>\r\n      </Number>\r\n    </Text>\r\n    <Text>\r\n      Neutral:{' '}\r\n      <Number>\r\n        <TotalNumber>{neutral}</TotalNumber>\r\n      </Number>\r\n    </Text>\r\n    <Text>\r\n      Bad:{' '}\r\n      <Number>\r\n        <TotalNumber>{bad}</TotalNumber>\r\n      </Number>\r\n    </Text>\r\n    <Text>\r\n      Total: <Number>{total}</Number>\r\n    </Text>\r\n    <Text>\r\n      Positive feedback: <Number>{positivePercentage}%</Number>\r\n    </Text>\r\n  </div>\r\n);\r\n\r\nStatistic.propTypes = {\r\n  good: PropTypes.number,\r\n  neutral: PropTypes.number,\r\n  bad: PropTypes.number,\r\n  total: PropTypes.number,\r\n  positivePercentage: PropTypes.number,\r\n};","import styled from '@emotion/styled';\r\n\r\nexport const ButtonStyle = styled.button`\r\npadding: 15px;\r\nmargin-left: 15px;\r\nbackground-color: white;\r\nfont-size: 20px;\r\nborder-radius: 20%;\r\ncolor: black;\r\nfont-weight: 700;\r\n&:hover {\r\n  background-color: while;\r\n}\r\n&:active {\r\n  background-color: silver;\r\n}\r\n`;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { ButtonStyle } from './Buttons.styled';\r\n\r\nexport const Button = ({ options, onLeaveFeedback }) =>\r\n  options.map(option => (\r\n    <ButtonStyle type=\"button\" key={option} onClick={() => onLeaveFeedback(option)}>\r\n      {option}\r\n    </ButtonStyle>\r\n  ));\r\n\r\nButton.propTypes = {\r\n  options: PropTypes.array,\r\n  onLeaveFeedback: PropTypes.func,\r\n};","import styled from '@emotion/styled';\r\n\r\nexport const Title = styled.h2`\r\nmargin: 24px;\r\nfont-size: 34px;\r\ncolor: black;\r\nfont-weight: bold;\r\n`;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Title} from '../Section/Section.styled';\r\n\r\nexport const Section = ({title, children})=> (\r\n    <>\r\n    <Title>{title}</Title>\r\n    <div>{children}</div>\r\n</>\r\n)\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string,\r\n    children: PropTypes.element,\r\n}","\r\nimport styled from '@emotion/styled';\r\n\r\nexport const Text = styled.p`\r\npadding: 24px;\r\nfont-size: 24px;\r\ncolor: red;\r\nfont-weight: bold;\r\n`;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Text} from './Notification.styled';\r\n\r\nexport const Notification = ({message}) => (\r\n    <Text>{message}</Text>\r\n)\r\n\r\nNotification.propTypes = {\r\n    message: PropTypes.string\r\n}","import React, { Component } from \"react\";\nimport { Statistic } from \"./components/Statistic/Statistic.jsx\";\nimport { Button } from \"./components/Buttons/Buttons.jsx\";\nimport { Section } from \"./components/Section/Section.jsx\";\nimport { Notification } from \"./components/Notification/Notification.jsx\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleIncrement = (option) => {\n    this.setState((prevState) => {\n      return {\n        [option]: prevState[option] + 1,\n      };\n    });\n  };\n\n  countTotalFeedback = () => {\n    const { good, bad, neutral } = this.state;\n    return good + bad + neutral;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good, neutral, bad } = this.state;\n    const total = good + neutral + bad;\n    return Math.round((good * 100) / total);\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    return (\n      <div>\n        <Section title=\"Please leave feedback\">\n          <Button\n            options={[\"good\", \"neutral\", \"bad\"]}\n            onLeaveFeedback={this.handleIncrement}\n          />\n        </Section>\n        {good || neutral || bad > 0 ? (\n          <Section title=\"Statistic\">\n            <Statistic\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          </Section>\n        ) : (\n          <Notification message=\"No feedback given\"></Notification>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}